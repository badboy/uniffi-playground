queue_rules:
  - name: default
    conditions:
      # Conditions to get out of the queue (= merged)
      - "check-success=ci/circleci: Check Rust formatting"
pull_request_rules:
  - name: Resolve conflict
    conditions:
      - conflict
    actions:
        comment:
          message: This pull request has conflicts when rebasing. Could you fix it @{{author}}? üôè
  - name: automatic merge for main
    conditions:
      - base=main
      - -draft
      - label=checkin-needed
      # What we want to say here is "all checks passed", but that's not a concept
      # that makes sense in GitHub:
      #
      #    https://docs.mergify.io/conditions/#validating-all-status-checks
      - "check-success=ci/circleci: Check Rust formatting"
      - "#check-pending=0"
      - "#check-stale=0"
    actions:
      # This merges by rebasing without strict merge, which means that mergify will *attempt*
      # to rebase a matching PR directly on to the `main` branch, even if the PR is out of date.
      # However, our GitHub branch protection rules require that PRs must be up-to-date before merging,
      # and mergify respects these rules, so the expected behaviour here is that mergify will only
      # merge when it can cleanly put the exact commits of the PR directly on top of `main`
      # (and thus avoid having to re-write any commits or create merge commits of its own).
      queue:
        method: rebase
        name: default
        rebase_fallback: none
