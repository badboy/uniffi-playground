# Build all the things we need for CI

version: 2.1

commands:
  install-mdbook:
    steps:
      - run:
          name: Install mdBook
          command: |
            mkdir -p $HOME/.bin
            pushd $HOME/.bin
            curl -sfSL --retry 5 --retry-delay 10 https://github.com/rust-lang-nursery/mdBook/releases/download/v0.4.2/mdbook-v0.4.2-x86_64-unknown-linux-gnu.tar.gz | tar xz
            echo 'export PATH="$HOME/.bin:$PATH"' >> $BASH_ENV
            popd
  # Our policy for updating rust versions is at https://github.com/mozilla/uniffi-rs/tree/main/docs/policies/rust-versions.md
  # See also rust-toolchain.toml in the root of this repo, which is used to specify our official target version.
  prepare-rust-target-version:
    steps:
      # So long as this is executed after the checkout it will use the version specified in rust-toolchain.yaml
      - run: rustup update
  # Our minimum supported rust version is specified here.
  prepare-rust-min-version:
    steps:
      - run: rustup override set 1.57.0
      - run: rustup update
  build-api-docs:
    steps:
      - run:
          name: Build API Docs
          # The `--lib` here is important; without it `cargo doc` will sometimes choose to document the `uniffi_bindgen` library
          # and othertimes choose to document the `uniffi_bindgen` binary, which is much less useful.
          command: cargo doc --no-deps --document-private-items --lib -p uniffi_bindgen -p uniffi -p uniffi_build -p uniffi_macros
          environment:
            RUSTDOCFLAGS: -Dwarnings -Arustdoc::private-intra-doc-links

jobs:
  Check Rust formatting:
    docker:
      - image: cimg/rust:1.61.0
    resource_class: small
    steps:
      - checkout
      - run: rustfmt --version
      - run: cargo fmt -- --check
  Lint Rust with clippy:
    docker:
      - image: rfkelly/uniffi-ci:latest
    resource_class: small
    steps:
      - checkout
      - prepare-rust-target-version
      - run: rustup component add clippy
      - run: cargo clippy --version
      - run: cargo clippy --all --all-targets -- -D warnings
  Lint Rust Docs:
    docker:
      - image: rfkelly/uniffi-ci:latest
    resource_class: small
    steps:
      - checkout
      - prepare-rust-target-version
      - build-api-docs
  Rust and Foreign Language tests:
    docker:
      - image: rfkelly/uniffi-ci:latest
    resource_class: large
    steps:
      - run: cat ~/.profile >> $BASH_ENV
      - checkout
      - prepare-rust-target-version
      - run:
          name: "Print the Rust version, to help with debugging"
          command: rustc --version
      - run:
          name: "Set RUSTFLAGS to fail the build if there are warnings"
          command: echo 'export RUSTFLAGS="-D warnings"' >> $BASH_ENV
      - run:
          name: Build all code
          command: |
            # Ensures that all examples are built and avaiable
            cargo build
      - run: cargo test
  Rust and Foreign Language tests - min supported rust:
    docker:
      - image: rfkelly/uniffi-ci:latest
    resource_class: large
    steps:
      - run: cat ~/.profile >> $BASH_ENV
      - checkout
      - prepare-rust-min-version
      - run:
          name: "Print the Rust version, to help with debugging"
          command: rustc --version
      - run:
          name: Build all code
          command: |
            # Ensures that all examples are built and avaiable
            cargo build
      # some tests fail on earlier rust versions and we want to ignore them:
      # * trybuild_ui_tests - error message had a comma inserted! Can probably
      #   be re-enabled after the next rust version bump.
      - run: cargo test -- --skip trybuild_ui_tests

workflows:
  version: 2
  check-formatting:
    jobs:
      - Check Rust formatting
